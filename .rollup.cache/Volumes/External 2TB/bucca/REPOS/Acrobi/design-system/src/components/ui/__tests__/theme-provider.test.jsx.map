{"version":3,"file":"theme-provider.test.jsx","sourceRoot":"","sources":["theme-provider.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import { renderHook } from '@testing-library/react';\nimport { ThemeProvider, useTheme } from '../theme-provider';\n\n// Mock localStorage\nconst localStorageMock = {\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  removeItem: jest.fn(),\n  clear: jest.fn(),\n};\nObject.defineProperty(window, 'localStorage', { value: localStorageMock });\n\n// Mock matchMedia\nObject.defineProperty(window, 'matchMedia', {\n  writable: true,\n  value: jest.fn().mockImplementation(query => ({\n    matches: false,\n    media: query,\n    onchange: null,\n    addListener: jest.fn(), // deprecated\n    removeListener: jest.fn(), // deprecated\n    addEventListener: jest.fn(),\n    removeEventListener: jest.fn(),\n    dispatchEvent: jest.fn(),\n  })),\n});\n\ndescribe('ThemeProvider', () => {\n  beforeEach(() => {\n    localStorageMock.getItem.mockClear();\n    localStorageMock.setItem.mockClear();\n    // Reset DOM\n    document.documentElement.className = '';\n    // Remove any existing theme links\n    const existingLinks = document.querySelectorAll('link[data-theme-css]');\n    existingLinks.forEach(link => link.remove());\n  });\n\n  describe('Theme Context', () => {\n    it('provides default theme values', () => {\n      const wrapper = ({ children }: { children: React.ReactNode }) => (\n        <ThemeProvider defaultMode=\"light\" defaultTheme=\"base\">\n          {children}\n        </ThemeProvider>\n      );\n\n      const { result } = renderHook(() => useTheme(), { wrapper });\n\n      expect(result.current.mode).toBe('light');\n      expect(result.current.theme).toBe('base');\n      expect(result.current.resolvedMode).toBe('light');\n    });\n\n    it('throws error when useTheme is used outside provider', () => {\n      const { result } = renderHook(() => useTheme());\n\n      expect(result.error).toBeInstanceOf(Error);\n      expect(result.error?.message).toBe('useTheme must be used within a ThemeProvider');\n    });\n  });\n\n  describe('Mode Management', () => {\n    it('initializes mode from localStorage', () => {\n      localStorageMock.getItem.mockImplementation((key) => {\n        if (key === 'acrobi-theme-mode') return 'dark';\n        return null;\n      });\n\n      const wrapper = ({ children }: { children: React.ReactNode }) => (\n        <ThemeProvider>\n          {children}\n        </ThemeProvider>\n      );\n\n      const { result } = renderHook(() => useTheme(), { wrapper });\n\n      expect(localStorageMock.getItem).toHaveBeenCalledWith('acrobi-theme-mode');\n    });\n\n    it('sets mode and persists to localStorage', () => {\n      const wrapper = ({ children }: { children: React.ReactNode }) => (\n        <ThemeProvider>\n          {children}\n        </ThemeProvider>\n      );\n\n      const { result } = renderHook(() => useTheme(), { wrapper });\n\n      result.current.setMode('dark');\n\n      expect(localStorageMock.setItem).toHaveBeenCalledWith('acrobi-theme-mode', 'dark');\n    });\n\n    it('toggles through modes correctly', () => {\n      const wrapper = ({ children }: { children: React.ReactNode }) => (\n        <ThemeProvider defaultMode=\"light\">\n          {children}\n        </ThemeProvider>\n      );\n\n      const { result } = renderHook(() => useTheme(), { wrapper });\n\n      expect(result.current.mode).toBe('light');\n\n      result.current.toggleMode();\n      expect(result.current.mode).toBe('dark');\n\n      result.current.toggleMode();\n      expect(result.current.mode).toBe('system');\n\n      result.current.toggleMode();\n      expect(result.current.mode).toBe('light');\n    });\n  });\n\n  describe('Theme Management', () => {\n    it('initializes theme from localStorage', () => {\n      localStorageMock.getItem.mockImplementation((key) => {\n        if (key === 'acrobi-color-theme') return 'purple';\n        return null;\n      });\n\n      const wrapper = ({ children }: { children: React.ReactNode }) => (\n        <ThemeProvider>\n          {children}\n        </ThemeProvider>\n      );\n\n      const { result } = renderHook(() => useTheme(), { wrapper });\n\n      expect(localStorageMock.getItem).toHaveBeenCalledWith('acrobi-color-theme');\n    });\n\n    it('sets theme and persists to localStorage', () => {\n      const wrapper = ({ children }: { children: React.ReactNode }) => (\n        <ThemeProvider>\n          {children}\n        </ThemeProvider>\n      );\n\n      const { result } = renderHook(() => useTheme(), { wrapper });\n\n      result.current.setTheme('blue');\n\n      expect(localStorageMock.setItem).toHaveBeenCalledWith('acrobi-color-theme', 'blue');\n    });\n\n    it('toggles through themes correctly', () => {\n      const wrapper = ({ children }: { children: React.ReactNode }) => (\n        <ThemeProvider defaultTheme=\"base\">\n          {children}\n        </ThemeProvider>\n      );\n\n      const { result } = renderHook(() => useTheme(), { wrapper });\n\n      const themes = ['base', 'blue', 'purple', 'green', 'orange', 'red'];\n\n      themes.forEach((expectedTheme, index) => {\n        expect(result.current.theme).toBe(expectedTheme);\n        if (index < themes.length - 1) {\n          result.current.toggleTheme();\n        }\n      });\n    });\n  });\n\n  describe('Dark Mode Application', () => {\n    it('applies dark class to document element', () => {\n      const wrapper = ({ children }: { children: React.ReactNode }) => (\n        <ThemeProvider defaultMode=\"dark\">\n          {children}\n        </ThemeProvider>\n      );\n\n      renderHook(() => useTheme(), { wrapper });\n\n      expect(document.documentElement.classList.contains('dark')).toBe(true);\n    });\n\n    it('removes dark class for light mode', () => {\n      const wrapper = ({ children }: { children: React.ReactNode }) => (\n        <ThemeProvider defaultMode=\"light\">\n          {children}\n        </ThemeProvider>\n      );\n\n      renderHook(() => useTheme(), { wrapper });\n\n      expect(document.documentElement.classList.contains('dark')).toBe(false);\n    });\n\n    it('respects system preference when mode is system', () => {\n      // Mock system prefers dark\n      window.matchMedia = jest.fn().mockImplementation(query => ({\n        matches: query === '(prefers-color-scheme: dark)',\n        media: query,\n        onchange: null,\n        addListener: jest.fn(),\n        removeListener: jest.fn(),\n        addEventListener: jest.fn(),\n        removeEventListener: jest.fn(),\n        dispatchEvent: jest.fn(),\n      }));\n\n      const wrapper = ({ children }: { children: React.ReactNode }) => (\n        <ThemeProvider defaultMode=\"system\" enableSystem={true}>\n          {children}\n        </ThemeProvider>\n      );\n\n      const { result } = renderHook(() => useTheme(), { wrapper });\n\n      expect(result.current.resolvedMode).toBe('dark');\n      expect(document.documentElement.classList.contains('dark')).toBe(true);\n    });\n  });\n\n  describe('Color Theme CSS Loading', () => {\n    // Mock document.head.appendChild\n    const mockAppendChild = jest.spyOn(document.head, 'appendChild').mockImplementation();\n\n    afterEach(() => {\n      mockAppendChild.mockClear();\n    });\n\n    it('does not load CSS for base theme', () => {\n      const wrapper = ({ children }: { children: React.ReactNode }) => (\n        <ThemeProvider defaultTheme=\"base\">\n          {children}\n        </ThemeProvider>\n      );\n\n      renderHook(() => useTheme(), { wrapper });\n\n      expect(mockAppendChild).not.toHaveBeenCalled();\n    });\n\n    it('loads CSS for non-base themes', () => {\n      const wrapper = ({ children }: { children: React.ReactNode }) => (\n        <ThemeProvider defaultTheme=\"blue\">\n          {children}\n        </ThemeProvider>\n      );\n\n      renderHook(() => useTheme(), { wrapper });\n\n      expect(mockAppendChild).toHaveBeenCalled();\n\n      const createdLink = mockAppendChild.mock.calls[0][0] as HTMLLinkElement;\n      expect(createdLink.tagName).toBe('LINK');\n      expect(createdLink.rel).toBe('stylesheet');\n      expect(createdLink.href).toContain('/themes/blue.css');\n      expect(createdLink.getAttribute('data-theme-css')).toBe('blue');\n    });\n  });\n\n  describe('TypeScript Type Safety', () => {\n    it('enforces correct mode types', () => {\n      const wrapper = ({ children }: { children: React.ReactNode }) => (\n        <ThemeProvider>\n          {children}\n        </ThemeProvider>\n      );\n\n      const { result } = renderHook(() => useTheme(), { wrapper });\n\n      // These should not cause TypeScript errors\n      const validModes: Array<'light' | 'dark' | 'system'> = ['light', 'dark', 'system'];\n      validModes.forEach(mode => {\n        result.current.setMode(mode);\n      });\n    });\n\n    it('enforces correct theme types', () => {\n      const wrapper = ({ children }: { children: React.ReactNode }) => (\n        <ThemeProvider>\n          {children}\n        </ThemeProvider>\n      );\n\n      const { result } = renderHook(() => useTheme(), { wrapper });\n\n      // These should not cause TypeScript errors\n      const validThemes: Array<'base' | 'blue' | 'purple' | 'green' | 'orange' | 'red'> =\n        ['base', 'blue', 'purple', 'green', 'orange', 'red'];\n      validThemes.forEach(theme => {\n        result.current.setTheme(theme);\n      });\n    });\n  });\n});"]}