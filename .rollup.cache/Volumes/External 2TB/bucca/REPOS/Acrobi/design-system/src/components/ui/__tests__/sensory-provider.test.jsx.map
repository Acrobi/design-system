{"version":3,"file":"sensory-provider.test.jsx","sourceRoot":"","sources":["sensory-provider.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import { renderHook } from '@testing-library/react';\nimport { SensoryProvider, useSensoryFeedback } from '../sensory-provider';\n\ndescribe('SensoryProvider', () => {\n  // Mock console methods\n  const mockConsoleLog = jest.spyOn(console, 'log').mockImplementation();\n\n  beforeEach(() => {\n    mockConsoleLog.mockClear();\n  });\n\n  afterEach(() => {\n    mockConsoleLog.mockClear();\n  });\n\n  describe('Provider Rendering', () => {\n    it('renders children without errors', () => {\n      const { result } = renderHook(() => useSensoryFeedback(), {\n        wrapper: ({ children }) => <SensoryProvider>{children}</SensoryProvider>,\n      });\n\n      expect(result.current).toBeDefined();\n    });\n  });\n\n  describe('Sensory Feedback Hook', () => {\n    it('provides playSfx function', () => {\n      const { result } = renderHook(() => useSensoryFeedback(), {\n        wrapper: ({ children }) => <SensoryProvider>{children}</SensoryProvider>,\n      });\n\n      expect(typeof result.current.playSfx).toBe('function');\n    });\n\n    it('provides triggerHaptic function', () => {\n      const { result } = renderHook(() => useSensoryFeedback(), {\n        wrapper: ({ children }) => <SensoryProvider>{children}</SensoryProvider>,\n      });\n\n      expect(typeof result.current.triggerHaptic).toBe('function');\n    });\n  });\n\n  describe('Sound Effects', () => {\n    it('plays sound effect when playSfx is called', () => {\n      const { result } = renderHook(() => useSensoryFeedback(), {\n        wrapper: ({ children }) => <SensoryProvider>{children}</SensoryProvider>,\n      });\n\n      result.current.playSfx('click');\n\n      expect(mockConsoleLog).toHaveBeenCalledWith('SFX: Playing sound \"click\"');\n    });\n\n    it('plays different sound effects', () => {\n      const { result } = renderHook(() => useSensoryFeedback(), {\n        wrapper: ({ children }) => <SensoryProvider>{children}</SensoryProvider>,\n      });\n\n      result.current.playSfx('hover');\n      result.current.playSfx('success');\n      result.current.playSfx('error');\n\n      expect(mockConsoleLog).toHaveBeenCalledWith('SFX: Playing sound \"hover\"');\n      expect(mockConsoleLog).toHaveBeenCalledWith('SFX: Playing sound \"success\"');\n      expect(mockConsoleLog).toHaveBeenCalledWith('SFX: Playing sound \"error\"');\n    });\n\n    it('handles empty sound names', () => {\n      const { result } = renderHook(() => useSensoryFeedback(), {\n        wrapper: ({ children }) => <SensoryProvider>{children}</SensoryProvider>,\n      });\n\n      result.current.playSfx('');\n\n      expect(mockConsoleLog).toHaveBeenCalledWith('SFX: Playing sound \"\"');\n    });\n  });\n\n  describe('Haptic Feedback', () => {\n    it('triggers haptic pattern when triggerHaptic is called', () => {\n      const { result } = renderHook(() => useSensoryFeedback(), {\n        wrapper: ({ children }) => <SensoryProvider>{children}</SensoryProvider>,\n      });\n\n      result.current.triggerHaptic('light');\n\n      expect(mockConsoleLog).toHaveBeenCalledWith('HAPTIC: Triggering pattern \"light\"');\n    });\n\n    it('triggers different haptic patterns', () => {\n      const { result } = renderHook(() => useSensoryFeedback(), {\n        wrapper: ({ children }) => <SensoryProvider>{children}</SensoryProvider>,\n      });\n\n      result.current.triggerHaptic('medium');\n      result.current.triggerHaptic('heavy');\n      result.current.triggerHaptic('success');\n\n      expect(mockConsoleLog).toHaveBeenCalledWith('HAPTIC: Triggering pattern \"medium\"');\n      expect(mockConsoleLog).toHaveBeenCalledWith('HAPTIC: Triggering pattern \"heavy\"');\n      expect(mockConsoleLog).toHaveBeenCalledWith('HAPTIC: Triggering pattern \"success\"');\n    });\n\n    it('handles empty haptic patterns', () => {\n      const { result } = renderHook(() => useSensoryFeedback(), {\n        wrapper: ({ children }) => <SensoryProvider>{children}</SensoryProvider>,\n      });\n\n      result.current.triggerHaptic('');\n\n      expect(mockConsoleLog).toHaveBeenCalledWith('HAPTIC: Triggering pattern \"\"');\n    });\n  });\n\n  describe('Fallback Behavior', () => {\n    it('provides dummy functions when provider is not used', () => {\n      const { result } = renderHook(() => useSensoryFeedback());\n\n      expect(typeof result.current.playSfx).toBe('function');\n      expect(typeof result.current.triggerHaptic).toBe('function');\n\n      // Should not throw errors\n      expect(() => {\n        result.current.playSfx('test');\n        result.current.triggerHaptic('test');\n      }).not.toThrow();\n    });\n\n    it('dummy functions do not log to console', () => {\n      const { result } = renderHook(() => useSensoryFeedback());\n\n      result.current.playSfx('test');\n      result.current.triggerHaptic('test');\n\n      expect(mockConsoleLog).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('TypeScript Type Safety', () => {\n    it('provides correctly typed functions', () => {\n      const { result } = renderHook(() => useSensoryFeedback(), {\n        wrapper: ({ children }) => <SensoryProvider>{children}</SensoryProvider>,\n      });\n\n      // TypeScript should enforce these types\n      expect(() => {\n        result.current.playSfx('click'); // string parameter\n        result.current.triggerHaptic('light'); // string parameter\n      }).not.toThrow();\n    });\n  });\n\n  describe('Integration with Components', () => {\n    it('can be used in component scenarios', () => {\n      const { result } = renderHook(() => useSensoryFeedback(), {\n        wrapper: ({ children }) => <SensoryProvider>{children}</SensoryProvider>,\n      });\n\n      // Simulate user interactions\n      result.current.playSfx('click');\n      result.current.triggerHaptic('light');\n      result.current.playSfx('hover');\n      result.current.triggerHaptic('success');\n\n      expect(mockConsoleLog).toHaveBeenCalledTimes(4);\n      expect(mockConsoleLog).toHaveBeenCalledWith('SFX: Playing sound \"click\"');\n      expect(mockConsoleLog).toHaveBeenCalledWith('HAPTIC: Triggering pattern \"light\"');\n      expect(mockConsoleLog).toHaveBeenCalledWith('SFX: Playing sound \"hover\"');\n      expect(mockConsoleLog).toHaveBeenCalledWith('HAPTIC: Triggering pattern \"success\"');\n    });\n  });\n});"]}