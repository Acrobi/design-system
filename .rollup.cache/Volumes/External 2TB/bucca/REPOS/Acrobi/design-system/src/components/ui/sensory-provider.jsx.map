{"version":3,"file":"sensory-provider.jsx","sourceRoot":"","sources":["sensory-provider.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAA;AACZ,OAAO,KAAK,EAAE,EAAE,aAAa,EAAE,UAAU,EAAE,MAAM,OAAO,CAAC;AAEzD,4FAA4F;AAC5F,MAAM,OAAO,GAAG,CAAC,KAAa,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,uBAAuB,KAAK,GAAG,CAAC,CAAC;AAChF,MAAM,aAAa,GAAG,CAAC,OAAe,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,+BAA+B,OAAO,GAAG,CAAC,CAAC;AAOlG,MAAM,cAAc,GAAG,aAAa,CAAiC,SAAS,CAAC,CAAC;AAEhF,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,EAAE,QAAQ,EAAiC,EAAE,EAAE;IAC7E,OAAO,CACL,CAAC,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,OAAO,EAAE,aAAa,EAAE,CAAC,CACzD;MAAA,CAAC,QAAQ,CACX;IAAA,EAAE,cAAc,CAAC,QAAQ,CAAC,CAC3B,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,kBAAkB,GAAG,GAAG,EAAE;IACrC,MAAM,OAAO,GAAG,UAAU,CAAC,cAAc,CAAC,CAAC;IAC3C,IAAI,OAAO,KAAK,SAAS,EAAE,CAAC;QAC1B,sDAAsD;QACtD,OAAO,EAAE,OAAO,EAAE,GAAG,EAAE,GAAE,CAAC,EAAE,aAAa,EAAE,GAAG,EAAE,GAAE,CAAC,EAAE,CAAC;IACxD,CAAC;IACD,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC","sourcesContent":["\"use client\"\nimport React, { createContext, useContext } from 'react';\n\n// For now, these are stubs. In the future, they could play sounds or use the Vibration API.\nconst playSfx = (sound: string) => console.log(`SFX: Playing sound \"${sound}\"`);\nconst triggerHaptic = (pattern: string) => console.log(`HAPTIC: Triggering pattern \"${pattern}\"`);\n\ninterface SensoryContextType {\n  playSfx: (sound: string) => void;\n  triggerHaptic: (pattern: string) => void;\n}\n\nconst SensoryContext = createContext<SensoryContextType | undefined>(undefined);\n\nexport const SensoryProvider = ({ children }: { children: React.ReactNode }) => {\n  return (\n    <SensoryContext.Provider value={{ playSfx, triggerHaptic }}>\n      {children}\n    </SensoryContext.Provider>\n  );\n};\n\nexport const useSensoryFeedback = () => {\n  const context = useContext(SensoryContext);\n  if (context === undefined) {\n    // Return dummy functions if the provider is not used.\n    return { playSfx: () => {}, triggerHaptic: () => {} };\n  }\n  return context;\n};"]}