{"version":3,"file":"assets.js","sourceRoot":"","sources":["assets.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Asset API utilities for fetching collections and interface-specific assets\n */\n\nexport interface Asset {\n  id: string;\n  url: string;\n  type: string;\n  filename: string;\n  size?: number;\n  mimeType?: string;\n  metaphorId: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface Metaphor {\n  id: string;\n  name: string;\n  description?: string;\n  assets: Asset[];\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface Collection {\n  id: string;\n  name: string;\n  description?: string;\n  assets: Array<{\n    id: string;\n    asset: Asset;\n    createdAt: string;\n  }>;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface AppInterfaceTheme {\n  id: string;\n  interfaceName: string;\n  themeId: string;\n  collectionId?: string;\n  collection?: Collection;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface AssetMap {\n  [metaphorName: string]: {\n    url: string;\n    type: string;\n    filename: string;\n  };\n}\n\n/**\n * Fetch assets for a specific interface and theme\n */\nexport async function fetchAssetsForInterface(\n  interfaceName: string,\n  themeId: string\n): Promise<{ baseAssets: AssetMap; interfaceAssets?: AssetMap }> {\n  try {\n    // Fetch interface theme configuration\n    const appInterfaceThemeResponse = await fetch(\n      `/api/app-interface-themes?interfaceName=${interfaceName}&themeId=${themeId}`\n    );\n\n    if (!appInterfaceThemeResponse.ok) {\n      throw new Error(`Failed to fetch interface theme: ${appInterfaceThemeResponse.statusText}`);\n    }\n\n    const appInterfaceThemes: AppInterfaceTheme[] = await appInterfaceThemeResponse.json();\n\n    // Get base theme assets (all metaphors with their default assets)\n    const metaphorsResponse = await fetch('/api/metaphors');\n    if (!metaphorsResponse.ok) {\n      throw new Error(`Failed to fetch metaphors: ${metaphorsResponse.statusText}`);\n    }\n\n    const metaphors: Metaphor[] = await metaphorsResponse.json();\n\n    // Build base asset map\n    const baseAssets: AssetMap = {};\n    metaphors.forEach(metaphor => {\n      if (metaphor.assets.length > 0) {\n        // Use the first asset for each metaphor\n        const asset = metaphor.assets[0];\n        baseAssets[metaphor.name] = {\n          url: asset.url,\n          type: asset.type,\n          filename: asset.filename,\n        };\n      }\n    });\n\n    // Build interface asset map if collection exists\n    let interfaceAssets: AssetMap | undefined;\n    const interfaceTheme = appInterfaceThemes[0]; // There should be only one per interface/theme\n\n    if (interfaceTheme?.collection) {\n      interfaceAssets = {};\n      interfaceTheme.collection.assets.forEach(({ asset }) => {\n        // Find the metaphor name for this asset\n        const metaphor = metaphors.find(m => m.id === asset.metaphorId);\n        if (metaphor) {\n          if (interfaceAssets && metaphor) {\n            interfaceAssets[metaphor.name] = {\n              url: asset.url,\n              type: asset.type,\n              filename: asset.filename,\n            };\n          }\n        }\n      });\n    }\n\n    return { baseAssets, interfaceAssets };\n  } catch (error) {\n    console.error('Error fetching assets for interface:', error);\n    throw error;\n  }\n}\n\n/**\n * Get the resolved asset URL with collection override logic\n */\nexport function getResolvedAsset(\n  metaphorName: string,\n  baseAssets: AssetMap,\n  interfaceAssets?: AssetMap\n): { url: string; type: string; filename: string } | null {\n  // Check interface assets first (collection override)\n  if (interfaceAssets && interfaceAssets[metaphorName]) {\n    return interfaceAssets[metaphorName];\n  }\n\n  // Fallback to base theme assets\n  if (baseAssets[metaphorName]) {\n    return baseAssets[metaphorName];\n  }\n\n  // No asset found\n  return null;\n}"]}