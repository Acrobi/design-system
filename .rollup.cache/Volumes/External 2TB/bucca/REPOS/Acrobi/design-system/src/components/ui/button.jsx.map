{"version":3,"file":"button.jsx","sourceRoot":"","sources":["button.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Architectural Standards: Button Component\n *\n * Component API Naming Convention: btn*\n * Golden Rule: NO hard-coded styles - uses variant system only\n * Size Primitives: Uses xs, sm, md, lg, xl size system\n * Controller Pattern: Integrates with useButtonController\n */\n\n\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"../../lib/utils\"\nimport { useSensoryFeedback } from \"./sensory-provider\"\nimport { buttonVariants } from \"../../lib/variants\"\nimport { useButtonController } from \"../../lib/controller\"\nimport { ButtonAPI, ArchitecturalMetadata } from \"../../lib/types\"\n\n// Button component props following naming convention\nexport interface ButtonProps\n  extends Omit<React.ButtonHTMLAttributes<HTMLButtonElement>, 'disabled' | 'size'>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n  children: React.ReactNode;\n  loadingText?: string;\n  onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  // Expose standard names for convenience while maintaining prefixed variants internally\n  variant?: VariantProps<typeof buttonVariants>['btnVariant'];\n  size?: VariantProps<typeof buttonVariants>['btnSize'];\n  disabled?: boolean;\n  loading?: boolean;\n}\n\n// Button component with architectural compliance\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({\n    className,\n    children,\n    asChild = false,\n    onClick,\n    loadingText,\n    variant,\n    size,\n    disabled,\n    loading,\n    ...props\n  }, ref) => {\n    // Controller integration for complex state management\n    const controller = useButtonController({\n      loading,\n      disabled\n    });\n\n    const { playSfx } = useSensoryFeedback();\n\n    const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n      playSfx('click');\n      if (onClick) onClick(e);\n    };\n\n    const Comp = asChild ? Slot : \"button\"\n\n    // Merge controller state with props\n    const isDisabled = disabled || controller.state.disabled || controller.state.loading;\n    const isLoading = controller.state.loading || loading;\n\n    return (\n      <Comp\n        className={cn(buttonVariants({\n          btnVariant: variant,\n          btnSize: size,\n          btnDisabled: isDisabled,\n          btnLoading: isLoading,\n          className\n        }))}\n        ref={ref}\n        disabled={isDisabled}\n        onClick={handleClick}\n        {...props}\n      >\n        {/* When loading, wrap both spinner and content in a single span */}\n        {isLoading ? (\n          <span className=\"relative inline-flex items-center justify-center\">\n            {/* Loading state */}\n            <span className=\"btn-loading-spinner absolute inset-0 flex items-center justify-center\">\n              <svg\n                className=\"animate-spin h-4 w-4\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n              >\n                <circle\n                  className=\"opacity-25\"\n                  cx=\"12\"\n                  cy=\"12\"\n                  r=\"10\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"4\"\n                />\n                <path\n                  className=\"opacity-75\"\n                  fill=\"currentColor\"\n                  d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n                />\n              </svg>\n            </span>\n\n            {/* Button content */}\n            <span className=\"opacity-0\">\n              {loadingText || children}\n            </span>\n          </span>\n        ) : (\n          // Normal state - render children directly\n          children\n        )}\n      </Comp>\n    )\n  }\n)\n\nButton.displayName = \"Button\"\n\n// Architectural compliance metadata\nexport const buttonMetadata: ArchitecturalMetadata = {\n  componentType: 'atomic',\n  hasHardcodedStyles: false, // Golden Rule compliance\n  followsNamingConvention: true, // btn* API\n  usesSizePrimitives: true, // xs, sm, md, lg, xl\n  hasControllerPattern: true, // useButtonController integration\n  lastReviewed: new Date()\n}\n\n// Button variants for convenience\nexport const ButtonVariants = {\n  Primary: (props: Omit<ButtonProps, 'btnVariant'>) => (\n    <Button {...props} btnVariant=\"primary\" />\n  ),\n  Secondary: (props: Omit<ButtonProps, 'btnVariant'>) => (\n    <Button {...props} btnVariant=\"secondary\" />\n  ),\n  Destructive: (props: Omit<ButtonProps, 'btnVariant'>) => (\n    <Button {...props} btnVariant=\"destructive\" />\n  ),\n  Outline: (props: Omit<ButtonProps, 'btnVariant'>) => (\n    <Button {...props} btnVariant=\"outline\" />\n  ),\n  Ghost: (props: Omit<ButtonProps, 'btnVariant'>) => (\n    <Button {...props} btnVariant=\"ghost\" />\n  ),\n  Link: (props: Omit<ButtonProps, 'btnVariant'>) => (\n    <Button {...props} btnVariant=\"link\" />\n  )\n} as const;\n\n// Button sizes for convenience\nexport const ButtonSizes = {\n  XS: (props: Omit<ButtonProps, 'btnSize'>) => (\n    <Button {...props} btnSize=\"xs\" />\n  ),\n  SM: (props: Omit<ButtonProps, 'btnSize'>) => (\n    <Button {...props} btnSize=\"sm\" />\n  ),\n  MD: (props: Omit<ButtonProps, 'btnSize'>) => (\n    <Button {...props} btnSize=\"md\" />\n  ),\n  LG: (props: Omit<ButtonProps, 'btnSize'>) => (\n    <Button {...props} btnSize=\"lg\" />\n  ),\n  XL: (props: Omit<ButtonProps, 'btnSize'>) => (\n    <Button {...props} btnSize=\"xl\" />\n  )\n} as const;\n\n// Export component and utilities\nexport { Button, buttonVariants };"]}