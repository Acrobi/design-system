{"version":3,"file":"ThemeProvider.jsx","sourceRoot":"","sources":["ThemeProvider.tsx"],"names":[],"mappings":"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","sourcesContent":["'use client';\n\nimport React, { createContext, useContext, useEffect, useState, type ReactNode } from 'react';\n\ninterface ThemeProviderConfig {\n  themeUrl?: string;\n  fallbackUrl?: string;\n}\n\ninterface ThemeContextValue {\n  themeUrl: string | null;\n  isLoading: boolean;\n  error: string | null;\n  reloadTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextValue | undefined>(undefined);\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n  themeUrl?: string;\n  fallbackUrl?: string;\n}\n\n/**\n * Dynamic ThemeProvider Component\n *\n * Manages the application of dynamic themes from a remote URL.\n * Automatically injects stylesheet links and handles loading states.\n */\nexport function ThemeProvider({\n  children,\n  themeUrl,\n  fallbackUrl\n}: ThemeProviderProps) {\n  const [currentThemeUrl, setCurrentThemeUrl] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  /**\n   * Load theme CSS from URL\n   */\n  const loadTheme = async (url: string) => {\n    if (!url) {\n      console.warn('ThemeProvider: No theme URL provided');\n      return;\n    }\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      // Remove any existing theme stylesheet\n      const existingLink = document.querySelector('link[data-acrobi-theme]');\n      if (existingLink) {\n        existingLink.remove();\n      }\n\n      // Create new stylesheet link\n      const link = document.createElement('link');\n      link.rel = 'stylesheet';\n      link.href = url;\n      link.setAttribute('data-acrobi-theme', 'true');\n\n      // Add error handling\n      link.onerror = () => {\n        console.error(`ThemeProvider: Failed to load theme from ${url}`);\n        if (fallbackUrl && url !== fallbackUrl) {\n          console.log(`ThemeProvider: Trying fallback URL: ${fallbackUrl}`);\n          loadTheme(fallbackUrl);\n        } else {\n          setError(`Failed to load theme from ${url}`);\n          setIsLoading(false);\n        }\n      };\n\n      link.onload = () => {\n        console.log(`ThemeProvider: Successfully loaded theme from ${url}`);\n        setCurrentThemeUrl(url);\n        setIsLoading(false);\n        setError(null);\n      };\n\n      // Inject into document head\n      document.head.appendChild(link);\n\n    } catch (err) {\n      console.error('ThemeProvider: Error loading theme:', err);\n      setError(`Error loading theme: ${err instanceof Error ? err.message : 'Unknown error'}`);\n      setIsLoading(false);\n    }\n  };\n\n  /**\n   * Reload the current theme\n   */\n  const reloadTheme = () => {\n    if (currentThemeUrl) {\n      loadTheme(currentThemeUrl);\n    } else if (themeUrl) {\n      loadTheme(themeUrl);\n    }\n  };\n\n  // Load theme when component mounts or themeUrl changes\n  useEffect(() => {\n    if (themeUrl) {\n      loadTheme(themeUrl);\n    }\n  }, [themeUrl]);\n\n  const contextValue: ThemeContextValue = {\n    themeUrl: currentThemeUrl,\n    isLoading,\n    error,\n    reloadTheme,\n  };\n\n  return (\n    <ThemeContext.Provider value={contextValue}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\n/**\n * Hook to access theme context\n */\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}\n\n/**\n * Component to display theme loading/error states\n */\nexport function ThemeStatus() {\n  const { isLoading, error, themeUrl } = useTheme();\n\n  if (isLoading) {\n    return (\n      <div className=\"text-sm text-muted-foreground\">\n        Loading theme from: {themeUrl}...\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"text-sm text-destructive\">\n        Theme error: {error}\n      </div>\n    );\n  }\n\n  if (themeUrl) {\n    return (\n      <div className=\"text-sm text-muted-foreground\">\n        Theme loaded from: {themeUrl}\n      </div>\n    );\n  }\n\n  return null;\n}\n\n/**\n * Hook to load theme from acrobi.config.json\n */\nexport function useConfigTheme() {\n  const [config, setConfig] = useState<{ themeUrl?: string } | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const loadConfig = async () => {\n      try {\n        const response = await fetch('/acrobi.config.json');\n        if (!response.ok) {\n          throw new Error(`Failed to load config: ${response.statusText}`);\n        }\n        const configData = await response.json();\n        setConfig(configData);\n        setError(null);\n      } catch (err) {\n        console.error('Error loading acrobi.config.json:', err);\n        setError(err instanceof Error ? err.message : 'Unknown error');\n        setConfig(null);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadConfig();\n  }, []);\n\n  return { config, isLoading, error };\n}"]}