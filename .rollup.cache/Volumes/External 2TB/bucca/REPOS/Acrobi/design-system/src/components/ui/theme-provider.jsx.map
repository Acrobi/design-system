{"version":3,"file":"theme-provider.jsx","sourceRoot":"","sources":["theme-provider.tsx"],"names":[],"mappings":"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","sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\n\n// ===================================\n// 🎨 THEME PROVIDER CONFIGURATION\n// ===================================\n// 🚨 AI AGENT GUIDANCE:\n// - This provider handles both mode switching (light/dark/system) AND color theme switching\n// - DO NOT modify the type definitions unless adding new themes\n// - DO NOT change the storage keys unless updating the entire system\n// - Color themes are loaded dynamically from separate CSS files in /themes directory\n// - This follows the proper architecture: separate theme files with dynamic loading\n// ===================================\n\ntype Mode = \"light\" | \"dark\" | \"system\"\ntype ColorTheme = \"base\" | \"blue\" | \"purple\" | \"green\" | \"orange\" | \"red\"\n\n// 🚨 DO NOT modify these interfaces unless adding new theme functionality\ninterface ThemeProviderProps {\n  children: React.ReactNode\n  defaultMode?: Mode          // Default mode on first load\n  defaultTheme?: ColorTheme   // Default color theme on first load\n  modeStorageKey?: string    // localStorage key for mode persistence\n  themeStorageKey?: string   // localStorage key for theme persistence\n  enableSystem?: boolean     // Enable system preference detection\n}\n\ninterface ThemeContextType {\n  mode: Mode                 // Current selected mode\n  setMode: (mode: Mode) => void   // Function to change mode\n  resolvedMode: \"light\" | \"dark\"  // Actual resolved mode (system -> light/dark)\n  toggleMode: () => void          // Function to cycle through modes\n  theme: ColorTheme          // Current color theme\n  setTheme: (theme: ColorTheme) => void  // Function to change color theme\n  toggleTheme: () => void          // Function to cycle through themes\n}\n\n// ===================================\n// 📱 THEME CONTEXT PROVIDER\n// ===================================\n// 🚨 AI AGENT GUIDANCE:\n// - This context provides theme mode functionality to the entire app\n// - DO NOT modify the context structure\n// - DO NOT add theme switching logic here - use CSS classes for client themes\n// - The provider handles DOM manipulation for .dark class\n// - localStorage persistence is automatic\n// ===================================\n\nconst ThemeContext = React.createContext<ThemeContextType | undefined>(undefined)\n\nexport function ThemeProvider({\n  children,\n  defaultMode = \"system\",\n  defaultTheme = \"base\",\n  modeStorageKey = \"acrobi-theme-mode\",\n  themeStorageKey = \"acrobi-color-theme\",\n  enableSystem = true,\n}: ThemeProviderProps) {\n  // 🚨 DO NOT modify these state initializations - they prevent hydration mismatches\n  const [mode, setModeState] = React.useState<Mode>(defaultMode)\n  const [theme, setThemeState] = React.useState<ColorTheme>(defaultTheme)\n  const [resolvedMode, setResolvedMode] = React.useState<\"light\" | \"dark\">(\"light\")\n  const [mounted, setMounted] = React.useState(false)\n\n  // ===================================\n  // 🌙 DARK MODE APPLICATION\n  // ===================================\n  // 🚨 AI AGENT GUIDANCE:\n  // - This function applies the dark mode class to the DOM\n  // - DO NOT modify the DOM manipulation logic\n  // - This ONLY handles .dark class addition/removal\n  // - Color themes are handled separately in applyColorTheme\n  // ===================================\n\n  const applyThemeMode = React.useCallback((newMode: Mode) => {\n    // 🚨 DO NOT modify this root element selection\n    const root = window.document.documentElement\n\n    // Resolve system mode to actual light/dark\n    let resolved: \"light\" | \"dark\" = newMode as \"light\" | \"dark\"\n\n    if (newMode === \"system\") {\n      // 🚨 DO NOT modify this system preference detection\n      resolved = window.matchMedia('(prefers-color-scheme: dark)').matches ? \"dark\" : \"light\"\n    }\n\n    // Apply or remove dark mode class\n    // 🚨 DO NOT modify this class logic - it's essential for CSS overrides\n    if (resolved === \"dark\") {\n      root.classList.add('dark')\n    } else {\n      root.classList.remove('dark')\n    }\n\n    setResolvedMode(resolved)\n\n    // Update meta theme-color for mobile browsers\n    // 🚨 DO NOT remove this - it's essential for mobile app experience\n    const themeColor = resolved === \"dark\" ? \"var(--background)\" : \"var(--background)\"\n    const metaThemeColor = document.querySelector('meta[name=\"theme-color\"]')\n    if (metaThemeColor) {\n      metaThemeColor.setAttribute('content', themeColor)\n    } else {\n      const meta = document.createElement('meta')\n      meta.name = \"theme-color\"\n      meta.content = themeColor\n      document.head.appendChild(meta)\n    }\n\n    // Debug logging - 🚨 DO NOT remove, helpful for development\n    console.log(`🎨 Theme Mode: ${newMode} (resolved: ${resolved})`)\n  }, [])\n\n  // ===================================\n  // 🎨 DYNAMIC THEME CSS LOADING\n  // ===================================\n  // 🚨 AI AGENT GUIDANCE:\n  // - This function dynamically loads theme CSS files\n  // - DO NOT modify the CSS loading logic\n  // - This follows the proper architecture: separate theme files\n  // - Works WITH dark mode - themes apply to both light and dark\n  // ===================================\n\n  const applyColorTheme = React.useCallback(async (newTheme: ColorTheme) => {\n    // 🚨 DO NOT modify this theme loading logic\n    const root = window.document.documentElement\n\n    // Remove existing theme CSS links\n    // 🚨 DO NOT modify this selector - it targets theme CSS links\n    const existingThemeLinks = root.querySelectorAll('link[data-theme-css]')\n    existingThemeLinks.forEach(link => link.remove())\n\n    // Don't load CSS for base theme (uses globals.css defaults)\n    if (newTheme === 'base') {\n      console.log(`🎨 Color Theme: ${newTheme} (using base theme)`)\n      return\n    }\n\n    // Create and append new theme CSS link\n    // 🚨 DO NOT modify this link creation logic\n    const themeLink = document.createElement('link')\n    themeLink.rel = 'stylesheet'\n    themeLink.href = `/themes/${newTheme}.css`\n    themeLink.setAttribute('data-theme-css', newTheme)\n    themeLink.setAttribute('data-theme-name', newTheme)\n\n    // Add the theme CSS to document head\n    document.head.appendChild(themeLink)\n\n    // Debug logging - 🚨 DO NOT remove, helpful for development\n    console.log(`🎨 Color Theme: ${newTheme} (loaded /themes/${newTheme}.css)`)\n  }, [])\n\n  // ===================================\n  // 💾 LOCAL STORAGE INITIALIZATION\n  // ===================================\n  // 🚨 AI AGENT GUIDANCE:\n  // - This effect loads saved mode and theme preferences from localStorage\n  // - DO NOT modify the storage key logic\n  // - DO NOT change the mounted state handling\n  // ===================================\n\n  React.useEffect(() => {\n    // 🚨 DO NOT modify this storage key retrieval\n    const storedMode = localStorage.getItem(modeStorageKey)\n    const storedTheme = localStorage.getItem(themeStorageKey)\n\n    if (storedMode) {\n      setModeState(storedMode as Mode)\n    }\n\n    if (storedTheme) {\n      setThemeState(storedTheme as ColorTheme)\n    }\n\n    // 🚨 DO NOT remove this mounted state - prevents hydration mismatches\n    setMounted(true)\n  }, [modeStorageKey, themeStorageKey])\n\n  // ===================================\n  // 🎯 THEME MODE APPLICATION\n  // ===================================\n  // 🚨 AI AGENT GUIDANCE:\n  // - This effect applies the theme mode when state changes\n  // - DO NOT modify the dependency array\n  // - DO NOT remove the mounted check\n  // ===================================\n\n  React.useEffect(() => {\n    if (mounted) {\n      applyThemeMode(mode)\n    }\n  }, [mode, mounted, applyThemeMode])\n\n  // ===================================\n  // 🎨 COLOR THEME APPLICATION\n  // ===================================\n  // 🚨 AI AGENT GUIDANCE:\n  // - This effect applies the color theme when state changes\n  // - DO NOT modify the dependency array\n  // - DO NOT remove the mounted check\n  // ===================================\n\n  React.useEffect(() => {\n    if (mounted) {\n      applyColorTheme(theme)\n    }\n  }, [theme, mounted, applyColorTheme])\n\n  // ===================================\n  // 🖥️ SYSTEM PREFERENCE LISTENING\n  // ===================================\n  // 🚨 AI AGENT GUIDANCE:\n  // - This effect listens for system theme preference changes\n  // - DO NOT modify the media query or event handling\n  // - DO NOT remove this - it's essential for system mode functionality\n  // ===================================\n\n  React.useEffect(() => {\n    if (!enableSystem) return\n\n    // 🚨 DO NOT modify this media query\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)')\n\n    const handleChange = () => {\n      if (mode === \"system\") {\n        applyThemeMode(\"system\")\n      }\n    }\n\n    // 🚨 DO NOT modify event listener management\n    mediaQuery.addEventListener('change', handleChange)\n    return () => mediaQuery.removeEventListener('change', handleChange)\n  }, [mode, applyThemeMode, enableSystem])\n\n  // ===================================\n  // 🔄 MODE & THEME MANAGEMENT FUNCTIONS\n  // ===================================\n  // 🚨 AI AGENT GUIDANCE:\n  // - These functions provide theme mode and color theme management\n  // - DO NOT modify the localStorage logic\n  // - DO NOT change the toggle cycling behavior\n  // ===================================\n\n  const setMode = React.useCallback((newMode: Mode) => {\n    setModeState(newMode)\n    // 🚨 DO NOT modify this localStorage persistence\n    localStorage.setItem(modeStorageKey, newMode)\n  }, [modeStorageKey])\n\n  const toggleMode = React.useCallback(() => {\n    // 🚨 DO NOT modify this cycling behavior\n    const currentMode = mode\n    let newMode: Mode\n\n    if (currentMode === \"light\") {\n      newMode = \"dark\"\n    } else if (currentMode === \"dark\") {\n      newMode = enableSystem ? \"system\" : \"light\"\n    } else {\n      newMode = \"light\"\n    }\n\n    setMode(newMode)\n  }, [mode, enableSystem, setMode])\n\n  const setTheme = React.useCallback((newTheme: ColorTheme) => {\n    setThemeState(newTheme)\n    // 🚨 DO NOT modify this localStorage persistence\n    localStorage.setItem(themeStorageKey, newTheme)\n  }, [themeStorageKey])\n\n  const toggleTheme = React.useCallback(() => {\n    // 🚨 DO NOT modify this cycling behavior\n    const themes: ColorTheme[] = [\"base\", \"blue\", \"purple\", \"green\", \"orange\", \"red\"]\n    const currentIndex = themes.indexOf(theme)\n    const nextIndex = (currentIndex + 1) % themes.length\n    setTheme(themes[nextIndex])\n  }, [theme, setTheme])\n\n  // Context value object\n  // 🚨 DO NOT modify this structure - components depend on it\n  const value = {\n    mode,\n    setMode,\n    resolvedMode,\n    toggleMode,\n    theme,\n    setTheme,\n    toggleTheme,\n  }\n\n  // ===================================\n  // 🔒 HYDRATION MISMATCH PREVENTION\n  // ===================================\n  // 🚨 AI AGENT GUIDANCE:\n  // - This prevents server/client rendering mismatches\n  // - DO NOT modify this rendering logic\n  // - DO NOT remove the mounted check\n  // ===================================\n\n  if (!mounted) {\n    return (\n      <ThemeContext.Provider value={value}>\n        {children}\n      </ThemeContext.Provider>\n    )\n  }\n\n  return (\n    <ThemeContext.Provider value={value}>\n      {children}\n    </ThemeContext.Provider>\n  )\n}\n\n// ===================================\n// 🎣 THEME HOOK\n// ===================================\n// 🚨 AI AGENT GUIDANCE:\n// - This hook provides access to theme functionality\n// - DO NOT modify the hook logic or error message\n// - Components MUST use this hook to access theme features\n// ===================================\n\nexport function useTheme() {\n  const context = React.useContext(ThemeContext)\n  if (context === undefined) {\n    // 🚨 DO NOT modify this error message - it's essential for debugging\n    throw new Error(\"useTheme must be used within a ThemeProvider\")\n  }\n  return context\n}"]}