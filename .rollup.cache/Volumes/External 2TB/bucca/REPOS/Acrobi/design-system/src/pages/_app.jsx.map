{"version":3,"file":"_app.jsx","sourceRoot":"","sources":["_app.tsx"],"names":[],"mappings":"AAAA,OAAO,uBAAuB,CAAA;AAE9B,OAAO,EAAE,aAAa,EAAE,MAAM,iCAAiC,CAAA;AAC/D,OAAO,EAAE,eAAe,EAAE,MAAM,mCAAmC,CAAA;AACnE,OAAO,EAAE,gBAAgB,EAAE,MAAM,oCAAoC,CAAA;AAErE,sCAAsC;AACtC,wBAAwB;AACxB,sCAAsC;AACtC,wBAAwB;AACxB,0DAA0D;AAC1D,yCAAyC;AACzC,4EAA4E;AAC5E,2DAA2D;AAC3D,+DAA+D;AAC/D,sCAAsC;AAEtC,MAAM,CAAC,OAAO,UAAU,GAAG,CAAC,EAAE,SAAS,EAAE,SAAS,EAAY;IAC5D,OAAO,CACL,EACE;MAAA,CAAC;;;;;;;;iDAQwC,CACzC;MAAA,CAAC,MAAM,CACL,uBAAuB,CAAC,CAAC;YACvB,MAAM,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WAmCP;SACF,CAAC,EAGJ;;MAAA,CAAC;;;;;;;;iDAQwC,CAEzC;;MAAA,CAAC,kDAAkD,CACnD;MAAA,CAAC,kDAAkD,CACnD;MAAA,CAAC,eAAe,CACd;QAAA,CAAC,+DAA+D,CAChE;QAAA,CAAC,kDAAkD,CACnD;QAAA,CAAC,aAAa,CACZ;UAAA,CAAC,iDAAiD,CAClD;UAAA,CAAC,uEAAuE,CACxE;UAAA,CAAC,GAAG,CAAC,SAAS,CAAC,4CAA4C,CAAC,wBAAwB,CAClF;YAAA,CAAC,8CAA8C,CAC/C;YAAA,CAAC,uEAAuE,CACxE;YAAA,CAAC,gBAAgB,CAAC,AAAD,EAEjB;;YAAA,CAAC,4DAA4D,CAC7D;YAAA,CAAC,2CAA2C,CAC5C;YAAA,CAAC,SAAS,CAAC,IAAI,SAAS,CAAC,EAC3B;UAAA,EAAE,GAAG,CACP;QAAA,EAAE,aAAa,CACjB;MAAA,EAAE,eAAe,CACnB;IAAA,GAAG,CACJ,CAAA;AACH,CAAC;AAED,sCAAsC;AACtC,4BAA4B;AAC5B,sCAAsC;AACtC,wBAAwB;AACxB,EAAE;AACF,gDAAgD;AAChD,8DAA8D;AAC9D,8DAA8D;AAC9D,mDAAmD;AACnD,EAAE;AACF,uBAAuB;AACvB,kDAAkD;AAClD,kDAAkD;AAClD,iDAAiD;AACjD,+CAA+C;AAC/C,EAAE;AACF,UAAU;AACV,8CAA8C;AAC9C,iDAAiD;AACjD,6CAA6C;AAC7C,2CAA2C;AAC3C,EAAE;AACF,uBAAuB;AACvB,+EAA+E;AAC/E,+DAA+D;AAC/D,iEAAiE;AACjE,sCAAsC","sourcesContent":["import '../styles/globals.css'\nimport type { AppProps } from 'next/app'\nimport { ThemeProvider } from '../components/ui/theme-provider'\nimport { SensoryProvider } from '../components/ui/sensory-provider'\nimport { GlobalNavigation } from '../components/ui/global-navigation'\n\n// ===================================\n// ðŸ“± APP ROOT COMPONENT\n// ===================================\n// ðŸš¨ AI AGENT GUIDANCE:\n// - This is the root component for the entire application\n// - DO NOT modify the provider structure\n// - DO NOT remove any of the providers unless refactoring the entire system\n// - The order of providers is important - DO NOT change it\n// - Theme initialization script must run before any React code\n// ===================================\n\nexport default function App({ Component, pageProps }: AppProps) {\n  return (\n    <>\n      {/* ===================================\n          ðŸŽ¨ THEME INITIALIZATION SCRIPT\n          ===================================\n          ðŸš¨ AI AGENT GUIDANCE:\n          - This script runs BEFORE React to prevent FOUC (Flash of Unstyled Content)\n          - DO NOT modify this script unless fixing initialization bugs\n          - DO NOT remove this script - it's essential for proper theme loading\n          - This ensures dark mode is applied before React hydrates\n          ===================================*/}\n      <script\n        dangerouslySetInnerHTML={{\n          __html: `\n            (function() {\n              try {\n                // ðŸš¨ DO NOT modify this storage key - must match ThemeProvider\n                var mode = localStorage.getItem('acrobi-theme-mode');\n                var root = document.documentElement;\n\n                // Apply dark mode based on saved preference\n                // ðŸš¨ DO NOT modify this dark mode logic\n                var resolvedMode = 'light';\n                if (mode === 'dark' || (mode === 'system' && window.matchMedia('(prefers-color-scheme: dark)').matches)) {\n                  resolvedMode = 'dark';\n                }\n\n                // Apply dark mode class to root element\n                // ðŸš¨ DO NOT modify this DOM manipulation - essential for CSS overrides\n                if (resolvedMode === 'dark') {\n                  root.classList.add('dark');\n                } else {\n                  root.classList.remove('dark');\n                }\n\n                // Set theme-color meta tag for mobile browsers\n                // ðŸš¨ DO NOT remove this - essential for mobile app experience\n                var meta = document.querySelector('meta[name=\"theme-color\"]') || document.createElement('meta');\n                meta.name = 'theme-color';\n                meta.content = resolvedMode === 'dark' ? '#020817' : '#ffffff';\n                if (!document.querySelector('meta[name=\"theme-color\"]')) {\n                  document.head.appendChild(meta);\n                }\n              } catch (e) {\n                // ðŸš¨ DO NOT remove this error handling - prevents app crashes\n                console.error('Theme initialization error:', e);\n              }\n            })();\n          `,\n        }}\n      />\n\n      {/* ===================================\n          ðŸŽ­ PROVIDER HIERARCHY\n          ===================================\n          ðŸš¨ AI AGENT GUIDANCE:\n          - The order of providers is important and intentional\n          - SensoryProvider wraps everything for audio/haptic feedback\n          - ThemeProvider provides dark/light mode switching\n          - DO NOT change this provider order without understanding dependencies\n          ===================================*/}\n\n      {/* Sensory feedback provider - wraps entire app */}\n      {/* ðŸš¨ DO NOT remove or reposition this provider */}\n      <SensoryProvider>\n        {/* Theme mode provider - handles light/dark/system switching */}\n        {/* ðŸš¨ DO NOT remove or reposition this provider */}\n        <ThemeProvider>\n          {/* Main app container with theme-aware styling */}\n          {/* ðŸš¨ DO NOT remove suppressHydrationWarning - prevents false errors */}\n          <div className=\"min-h-screen bg-background text-foreground\" suppressHydrationWarning>\n            {/* Global navigation - appears on all pages */}\n            {/* ðŸš¨ DO NOT remove navigation unless creating page-specific layouts */}\n            <GlobalNavigation />\n\n            {/* Page content - rendered component from pages directory */}\n            {/* ðŸš¨ DO NOT modify this props spreading */}\n            <Component {...pageProps} />\n          </div>\n        </ThemeProvider>\n      </SensoryProvider>\n    </>\n  )\n}\n\n// ===================================\n// ðŸ“š APP ARCHITECTURE NOTES\n// ===================================\n// ðŸš¨ AI AGENT GUIDANCE:\n//\n// PROVIDER ORDER (from outermost to innermost):\n// 1. SensoryProvider - Provides audio/haptic feedback context\n// 2. ThemeProvider - Provides light/dark/system theme context\n// 3. Page Content - The actual page being rendered\n//\n// INITIALIZATION FLOW:\n// 1. Theme script runs immediately (before React)\n// 2. React hydrates with consistent initial state\n// 3. Providers initialize with saved preferences\n// 4. Theme provider applies any needed changes\n//\n// DO NOT:\n// - Add providers that break the theme system\n// - Modify the theme initialization script logic\n// - Remove the suppressHydrationWarning prop\n// - Change the global navigation placement\n//\n// MODIFY WITH CAUTION:\n// - Add new providers outside the theme provider if they don't depend on theme\n// - Update the container styling if changing the layout system\n// - Modify the theme-color values to match design system changes\n// ==================================="]}