{"version":3,"file":"icon.jsx","sourceRoot":"","sources":["icon.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Architectural Standards: Icon Component\n *\n * Component API Naming Convention: icn*\n * Golden Rule: NO hard-coded styles - uses variant system only\n * Size Primitives: Uses xs, sm, md, lg, xl size system\n * Controller Pattern: Simple state management with hooks\n */\n\n\"use client\"\n\nimport * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"../../lib/utils\"\nimport { iconVariants } from \"../../lib/variants\"\nimport { IconAPI, ArchitecturalMetadata } from \"../../lib/types\"\nimport { IconMetaphor } from \"../../lib/icon-metaphors\"\nimport { lucideMap } from \"../../lib/icon-maps/lucide.map\"\n\n// Icon component props following naming convention\nexport interface IconProps\n  extends React.SVGAttributes<SVGSVGElement>,\n    VariantProps<typeof iconVariants> {\n  metaphor: IconMetaphor;\n  fallback?: React.ReactNode;\n}\n\n// Icon component with architectural compliance\nconst Icon = React.forwardRef<SVGSVGElement, IconProps>(\n  ({\n    className,\n    metaphor,\n    icnVariant,\n    icnSize,\n    icnRotated,\n    icnAnimated,\n    fallback,\n    ...props\n  }, ref) => {\n    // Get the Lucide icon component from the map\n    const LucideIcon = lucideMap[metaphor] || lucideMap.placeholder;\n\n    // If icon is not found and fallback is provided, render fallback\n    if (!lucideMap[metaphor] && fallback) {\n      return (\n        <span\n          ref={ref as any}\n          className={cn(\n            \"inline-flex items-center justify-center\",\n            iconVariants({\n              icnVariant,\n              icnSize,\n              icnRotated,\n              icnAnimated,\n              className\n            })\n          )}\n          {...(props as any)}\n        >\n          {fallback}\n        </span>\n      );\n    }\n\n    // Render the Lucide icon with variant system\n    return (\n      <LucideIcon\n        ref={ref}\n        className={cn(iconVariants({\n          icnVariant,\n          icnSize,\n          icnRotated,\n          icnAnimated,\n          className\n        }))}\n        {...props}\n      />\n    );\n  }\n)\n\nIcon.displayName = \"Icon\"\n\n// Architectural compliance metadata\nexport const iconMetadata: ArchitecturalMetadata = {\n  componentType: 'atomic',\n  hasHardcodedStyles: false, // Golden Rule compliance\n  followsNamingConvention: true, // icn* API\n  usesSizePrimitives: true, // xs, sm, md, lg, xl\n  hasControllerPattern: false, // Simple component, no controller needed\n  lastReviewed: new Date()\n}\n\n// Icon variants for convenience\nexport const IconVariants = {\n  Default: (props: Omit<IconProps, 'icnVariant'>) => (\n    <Icon {...props} icnVariant=\"default\" />\n  ),\n  Button: (props: Omit<IconProps, 'icnVariant'>) => (\n    <Icon {...props} icnVariant=\"button\" />\n  ),\n  Input: (props: Omit<IconProps, 'icnVariant'>) => (\n    <Icon {...props} icnVariant=\"input\" />\n  ),\n  Standalone: (props: Omit<IconProps, 'icnVariant'>) => (\n    <Icon {...props} icnVariant=\"standalone\" />\n  )\n} as const;\n\n// Icon sizes for convenience\nexport const IconSizes = {\n  XS: (props: Omit<IconProps, 'icnSize'>) => (\n    <Icon {...props} icnSize=\"xs\" />\n  ),\n  SM: (props: Omit<IconProps, 'icnSize'>) => (\n    <Icon {...props} icnSize=\"sm\" />\n  ),\n  MD: (props: Omit<IconProps, 'icnSize'>) => (\n    <Icon {...props} icnSize=\"md\" />\n  ),\n  LG: (props: Omit<IconProps, 'icnSize'>) => (\n    <Icon {...props} icnSize=\"lg\" />\n  ),\n  XL: (props: Omit<IconProps, 'icnSize'>) => (\n    <Icon {...props} icnSize=\"xl\" />\n  )\n} as const;\n\n// Specialized icon components for common use cases\nexport const ButtonIcon = (props: Omit<IconProps, 'icnVariant'>) => (\n  <Icon {...props} icnVariant=\"button\" icnSize=\"sm\" />\n);\n\nexport const InputIcon = (props: Omit<IconProps, 'icnVariant'>) => (\n  <Icon {...props} icnVariant=\"input\" icnSize=\"sm\" />\n);\n\nexport const LoadingIcon = (props: Omit<IconProps, 'metaphor' | 'icnAnimated'>) => (\n  <Icon\n    {...props}\n    metaphor=\"placeholder\"\n    icnAnimated={true}\n    icnVariant=\"default\"\n  />\n);\n\n// Icon factory for creating custom icon variants\nexport const createIconVariant = (\n  defaultVariant: IconProps['icnVariant'],\n  defaultSize: IconProps['icnSize'] = 'md'\n) => {\n  return (props: Omit<IconProps, 'icnVariant' | 'icnSize'>) => (\n    <Icon\n      {...props}\n      icnVariant={defaultVariant}\n      icnSize={defaultSize}\n    />\n  );\n};\n\n// Export component and utilities\nexport { Icon, iconVariants };"]}