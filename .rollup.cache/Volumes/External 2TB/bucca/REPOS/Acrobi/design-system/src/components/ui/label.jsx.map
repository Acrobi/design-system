{"version":3,"file":"label.jsx","sourceRoot":"","sources":["label.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Architectural Standards: Label Component\n *\n * Component API Naming Convention: lbl*\n * Golden Rule: NO hard-coded styles - uses variant system only\n * Size Primitives: Uses xs, sm, md, lg, xl size system\n * Controller Pattern: Simple state management with hooks\n */\n\n\"use client\"\n\nimport * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"../../lib/utils\"\nimport { labelVariants } from \"../../lib/variants\"\nimport { LabelAPI, ArchitecturalMetadata } from \"../../lib/types\"\nimport { IconMetaphor } from \"../../lib/icon-metaphors\"\nimport { Icon } from \"./icon\"\n\n// Label component props following naming convention\nexport interface LabelProps\n  extends React.LabelHTMLAttributes<HTMLLabelElement>,\n    VariantProps<typeof labelVariants> {\n  children: React.ReactNode;\n  icon?: IconMetaphor;\n  htmlFor?: string;\n  // Expose standard names for convenience while maintaining prefixed variants internally\n  variant?: VariantProps<typeof labelVariants>['lblVariant'];\n  size?: VariantProps<typeof labelVariants>['lblSize'];\n  required?: boolean;\n  optional?: boolean;\n}\n\n// Label component with architectural compliance\nconst Label = React.forwardRef<HTMLLabelElement, LabelProps>(\n  ({\n    className,\n    children,\n    variant,\n    size,\n    required,\n    optional,\n    icon,\n    htmlFor,\n    ...props\n  }, ref) => {\n    // Map standard names to the prefixed names expected by labelVariants\n    const mappedVariant = required ? 'required' :\n                         optional ? 'optional' :\n                         variant === 'error' ? 'error' :\n                         'default';\n\n    return (\n      <label\n        ref={ref}\n        htmlFor={htmlFor}\n        className={cn(labelVariants({\n          lblVariant: mappedVariant,\n          lblSize: size,\n          lblRequired: required,\n          lblOptional: optional,\n          className\n        }))}\n        {...props}\n      >\n        {/* Icon integration */}\n        {icon && (\n          <span className=\"lbl-icon\">\n            <Icon\n              metaphor={icon}\n              icnSize={size || 'sm'}\n              icnVariant=\"default\"\n            />\n          </span>\n        )}\n\n        {/* Label text */}\n        <span className=\"lbl-text\">\n          {children}\n        </span>\n\n        {/* Required indicator */}\n        {required && (\n          <span className=\"lbl-required-indicator\" aria-hidden=\"true\">\n            *\n          </span>\n        )}\n\n        {/* Optional indicator */}\n        {optional && !required && (\n          <span className=\"lbl-optional-indicator\" aria-hidden=\"true\">\n            (optional)\n          </span>\n        )}\n      </label>\n    )\n  }\n)\n\nLabel.displayName = \"Label\"\n\n// Architectural compliance metadata\nexport const labelMetadata: ArchitecturalMetadata = {\n  componentType: 'atomic',\n  hasHardcodedStyles: false, // Golden Rule compliance\n  followsNamingConvention: true, // lbl* API\n  usesSizePrimitives: true, // xs, sm, md, lg, xl\n  hasControllerPattern: false, // Simple component, no controller needed\n  lastReviewed: new Date()\n}\n\n// Label variants for convenience\nexport const LabelVariants = {\n  Default: (props: Omit<LabelProps, 'variant'>) => (\n    <Label {...props} variant=\"default\" />\n  ),\n  Required: (props: Omit<LabelProps, 'variant'>) => (\n    <Label {...props} required={true} />\n  ),\n  Optional: (props: Omit<LabelProps, 'variant'>) => (\n    <Label {...props} variant=\"optional\" />\n  ),\n  Error: (props: Omit<LabelProps, 'variant'>) => (\n    <Label {...props} variant=\"error\" />\n  )\n} as const;\n\n// Label sizes for convenience\nexport const LabelSizes = {\n  XS: (props: Omit<LabelProps, 'lblSize'>) => (\n    <Label {...props} lblSize=\"xs\" />\n  ),\n  SM: (props: Omit<LabelProps, 'lblSize'>) => (\n    <Label {...props} lblSize=\"sm\" />\n  ),\n  MD: (props: Omit<LabelProps, 'lblSize'>) => (\n    <Label {...props} lblSize=\"md\" />\n  ),\n  LG: (props: Omit<LabelProps, 'lblSize'>) => (\n    <Label {...props} lblSize=\"lg\" />\n  ),\n  XL: (props: Omit<LabelProps, 'lblSize'>) => (\n    <Label {...props} lblSize=\"xl\" />\n  )\n} as const;\n\n// Export component and utilities\nexport { Label, labelVariants };"]}