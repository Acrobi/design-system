{"version":3,"file":"AssetProvider.jsx","sourceRoot":"","sources":["AssetProvider.tsx"],"names":[],"mappings":"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","sourcesContent":["'use client';\n\nimport React, { createContext, useContext, useEffect, useState, type ReactNode } from 'react';\nimport { fetchAssetsForInterface, type AssetMap } from '../lib/assets.js';\nimport { useTheme } from './ThemeProvider.js';\n\ninterface AssetContextValue {\n  assets: AssetMap;\n  isLoading: boolean;\n  error: string | null;\n  getAsset: (metaphor: string) => { url: string; type: string; filename: string } | null;\n  refetch: () => void;\n}\n\nconst AssetContext = createContext<AssetContextValue | undefined>(undefined);\n\ninterface AssetProviderProps {\n  children: ReactNode;\n  appInterface?: string;\n  themeId?: string;\n}\n\n/**\n * Asset Provider Component\n *\n * Manages asset resolution with collection override support.\n * Fetches base theme assets and interface-specific collection assets.\n * Provides override logic: collection assets take precedence over base assets.\n */\nexport function AssetProvider({\n  children,\n  appInterface,\n  themeId\n}: AssetProviderProps) {\n  const [assets, setAssets] = useState<AssetMap>({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // Get theme URL to extract theme ID if not provided\n  const { themeUrl } = useTheme();\n\n  /**\n   * Load assets for the current interface and theme\n   */\n  const loadAssets = async () => {\n    if (!appInterface) {\n      console.warn('AssetProvider: No appInterface provided, skipping asset loading');\n      return;\n    }\n\n    // Extract theme ID from theme URL or use provided themeId\n    let currentThemeId = themeId;\n    if (!currentThemeId && themeUrl) {\n      // Try to extract theme ID from theme URL\n      const urlParams = new URLSearchParams(themeUrl.split('?')[1] || '');\n      currentThemeId = urlParams.get('themeId') || undefined;\n    }\n\n    if (!currentThemeId) {\n      console.warn('AssetProvider: No themeId available, skipping asset loading');\n      return;\n    }\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const { baseAssets, interfaceAssets } = await fetchAssetsForInterface(\n        appInterface,\n        currentThemeId\n      );\n\n      // Merge assets with interface assets taking precedence\n      const mergedAssets: AssetMap = { ...baseAssets };\n\n      if (interfaceAssets) {\n        Object.assign(mergedAssets, interfaceAssets);\n      }\n\n      setAssets(mergedAssets);\n      console.log(`AssetProvider: Loaded ${Object.keys(mergedAssets).length} assets for interface \"${appInterface}\"`);\n\n    } catch (err) {\n      console.error('AssetProvider: Error loading assets:', err);\n      setError(err instanceof Error ? err.message : 'Failed to load assets');\n      setAssets({});\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  /**\n   * Get resolved asset for a metaphor\n   */\n  const getAsset = (metaphor: string) => {\n    return assets[metaphor] || null;\n  };\n\n  /**\n   * Refetch assets\n   */\n  const refetch = () => {\n    loadAssets();\n  };\n\n  // Load assets when dependencies change\n  useEffect(() => {\n    if (appInterface) {\n      loadAssets();\n    }\n  }, [appInterface, themeId, themeUrl]);\n\n  const contextValue: AssetContextValue = {\n    assets,\n    isLoading,\n    error,\n    getAsset,\n    refetch,\n  };\n\n  return (\n    <AssetContext.Provider value={contextValue}>\n      {children}\n    </AssetContext.Provider>\n  );\n}\n\n/**\n * Hook to access asset context\n */\nexport function useAssets() {\n  const context = useContext(AssetContext);\n  if (context === undefined) {\n    throw new Error('useAssets must be used within an AssetProvider');\n  }\n  return context;\n}\n\n/**\n * Hook to get a specific asset by metaphor\n */\nexport function useAsset(metaphor: string) {\n  const { getAsset, isLoading, error } = useAssets();\n  const asset = getAsset(metaphor);\n\n  return {\n    asset,\n    isLoading,\n    error,\n    hasAsset: !!asset,\n  };\n}"]}