/**
 * Foundations Demo View - Comprehensive showcase of all primitive tokens and components
 * This component serves as visual regression test for the core theme system
 */
"use client";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from "react";
import { Button } from "./button";
import { Input } from "./input";
import { Textarea } from "./textarea";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "./card";
import { Badge } from "./badge";
import { Label } from "./label";
import { Switch } from "./switch";
import { Checkbox } from "./checkbox";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "./tabs";
import { AlertDestructive, AlertSuccess, AlertWarning, AlertInfo } from "./alert";
import { useTheme } from "./theme-provider";
export function FoundationsDemo() {
    const [theme, setTheme] = useState(useTheme());
    const [inputValue, setInputValue] = useState("");
    const [textareaValue, setTextareaValue] = useState("");
    const [switchState, setSwitchState] = useState(false);
    const [checkboxState, setCheckboxState] = useState(false);
    const toggleTheme = () => {
        setTheme(theme === "light" ? "dark" : "light");
    };
    return (_jsx("div", { className: "min-h-screen bg-background text-foreground p-6", children: _jsxs("div", { className: "max-w-6xl mx-auto space-y-8", children: [_jsxs("div", { className: "text-center space-y-4", children: [_jsx("h1", { className: "text-4xl font-bold", children: "Design System Foundations" }), _jsx("p", { className: "text-lg text-muted-foreground", children: "Comprehensive showcase of all primitive tokens and components" }), _jsxs(Button, { onClick: toggleTheme, variant: "outline", children: ["Current Theme: ", theme] })] }), _jsxs(Card, { children: [_jsxs(CardHeader, { children: [_jsx(CardTitle, { children: "Color Palette" }), _jsx(CardDescription, { children: "All semantic color tokens from the design system" })] }), _jsx(CardContent, { children: _jsxs("div", { className: "grid grid-cols-2 md:grid-cols-4 lg:grid-cols-8 gap-4", children: [_jsxs("div", { className: "space-y-2", children: [_jsx("div", { className: "h-12 rounded bg-primary" }), _jsx("p", { className: "text-xs text-center", children: "primary" })] }), _jsxs("div", { className: "space-y-2", children: [_jsx("div", { className: "h-12 rounded bg-primary-foreground" }), _jsx("p", { className: "text-xs text-center", children: "primary-foreground" })] }), _jsxs("div", { className: "space-y-2", children: [_jsx("div", { className: "h-12 rounded bg-secondary" }), _jsx("p", { className: "text-xs text-center", children: "secondary" })] }), _jsxs("div", { className: "space-y-2", children: [_jsx("div", { className: "h-12 rounded bg-secondary-foreground" }), _jsx("p", { className: "text-xs text-center", children: "secondary-foreground" })] }), _jsxs("div", { className: "space-y-2", children: [_jsx("div", { className: "h-12 rounded bg-background border" }), _jsx("p", { className: "text-xs text-center", children: "background" })] }), _jsxs("div", { className: "space-y-2", children: [_jsx("div", { className: "h-12 rounded bg-foreground" }), _jsx("p", { className: "text-xs text-center", children: "foreground" })] }), _jsxs("div", { className: "space-y-2", children: [_jsx("div", { className: "h-12 rounded bg-muted" }), _jsx("p", { className: "text-xs text-center", children: "muted" })] }), _jsxs("div", { className: "space-y-2", children: [_jsx("div", { className: "h-12 rounded bg-muted-foreground" }), _jsx("p", { className: "text-xs text-center", children: "muted-foreground" })] }), _jsxs("div", { className: "space-y-2", children: [_jsx("div", { className: "h-12 rounded bg-accent" }), _jsx("p", { className: "text-xs text-center", children: "accent" })] }), _jsxs("div", { className: "space-y-2", children: [_jsx("div", { className: "h-12 rounded bg-accent-foreground" }), _jsx("p", { className: "text-xs text-center", children: "accent-foreground" })] }), _jsxs("div", { className: "space-y-2", children: [_jsx("div", { className: "h-12 rounded bg-destructive" }), _jsx("p", { className: "text-xs text-center", children: "destructive" })] }), _jsxs("div", { className: "space-y-2", children: [_jsx("div", { className: "h-12 rounded bg-destructive-foreground" }), _jsx("p", { className: "text-xs text-center", children: "destructive-foreground" })] }), _jsxs("div", { className: "space-y-2", children: [_jsx("div", { className: "h-12 rounded bg-border" }), _jsx("p", { className: "text-xs text-center", children: "border" })] }), _jsxs("div", { className: "space-y-2", children: [_jsx("div", { className: "h-12 rounded bg-input" }), _jsx("p", { className: "text-xs text-center", children: "input" })] }), _jsxs("div", { className: "space-y-2", children: [_jsx("div", { className: "h-12 rounded bg-ring" }), _jsx("p", { className: "text-xs text-center", children: "ring" })] })] }) })] }), _jsxs(Card, { children: [_jsxs(CardHeader, { children: [_jsx(CardTitle, { children: "Typography Scale" }), _jsx(CardDescription, { children: "Fluid typography using CSS clamp() for responsive text" })] }), _jsx(CardContent, { className: "space-y-4", children: _jsxs("div", { className: "space-y-2", children: [_jsx("p", { className: "text-xs", children: "text-xs - Small text" }), _jsx("p", { className: "text-sm", children: "text-sm - Body text" }), _jsx("p", { className: "text-base", children: "text-base - Default text" }), _jsx("p", { className: "text-lg", children: "text-lg - Large text" }), _jsx("p", { className: "text-xl", children: "text-xl - Extra large text" }), _jsx("p", { className: "text-2xl", children: "text-2xl - Heading text" }), _jsx("p", { className: "text-3xl", children: "text-3xl - Large heading" }), _jsx("p", { className: "text-4xl", children: "text-4xl - Display heading" })] }) })] }), _jsxs(Card, { children: [_jsxs(CardHeader, { children: [_jsx(CardTitle, { children: "Button Components" }), _jsx(CardDescription, { children: "All button variants and sizes" })] }), _jsxs(CardContent, { className: "space-y-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx("h4", { className: "text-sm font-medium", children: "Button Variants" }), _jsxs("div", { className: "flex flex-wrap gap-2", children: [_jsx(Button, { variant: "default", children: "Default" }), _jsx(Button, { variant: "secondary", children: "Secondary" }), _jsx(Button, { variant: "outline", children: "Outline" }), _jsx(Button, { variant: "ghost", children: "Ghost" }), _jsx(Button, { variant: "link", children: "Link" }), _jsx(Button, { variant: "destructive", children: "Destructive" }), _jsx(Button, { variant: "success", children: "Success" }), _jsx(Button, { variant: "warning", children: "Warning" }), _jsx(Button, { variant: "info", children: "Info" })] })] }), _jsxs("div", { className: "space-y-3", children: [_jsx("h4", { className: "text-sm font-medium", children: "Button Sizes" }), _jsxs("div", { className: "flex flex-wrap items-center gap-2", children: [_jsx(Button, { size: "sm", children: "Small" }), _jsx(Button, { size: "default", children: "Default" }), _jsx(Button, { size: "lg", children: "Large" }), _jsx(Button, { size: "icon", children: "\uD83D\uDD25" })] })] })] })] }), _jsxs(Card, { children: [_jsxs(CardHeader, { children: [_jsx(CardTitle, { children: "Form Components" }), _jsx(CardDescription, { children: "Input fields, textareas, checkboxes, switches, and more" })] }), _jsx(CardContent, { className: "space-y-6", children: _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "text-input", children: "Text Input" }), _jsx(Input, { id: "text-input", placeholder: "Enter some text...", value: inputValue, onChange: (e) => setInputValue(e.target.value) })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "error-input", children: "Error State" }), _jsx(Input, { id: "error-input", placeholder: "This field has an error", error: true })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "textarea", children: "Textarea" }), _jsx(Textarea, { id: "textarea", placeholder: "Enter longer text here...", value: textareaValue, onChange: (e) => setTextareaValue(e.target.value) })] })] }), _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Switch, { checked: switchState, onCheckedChange: setSwitchState }), _jsx(Label, { children: "Toggle Switch" })] }), _jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Checkbox, { checked: checkboxState, onCheckedChange: setCheckboxState }), _jsx(Label, { children: "Checkbox Option" })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { children: "Badges" }), _jsxs("div", { className: "flex flex-wrap gap-2", children: [_jsx(Badge, { children: "Default" }), _jsx(Badge, { variant: "secondary", children: "Secondary" }), _jsx(Badge, { variant: "outline", children: "Outline" }), _jsx(Badge, { variant: "destructive", children: "Destructive" }), _jsx(Badge, { variant: "success", children: "Success" }), _jsx(Badge, { variant: "warning", children: "Warning" }), _jsx(Badge, { variant: "info", children: "Info" })] })] })] })] }) })] }), _jsxs(Card, { children: [_jsxs(CardHeader, { children: [_jsx(CardTitle, { children: "Alert Components" }), _jsx(CardDescription, { children: "Pre-configured alert variants for different message types" })] }), _jsxs(CardContent, { className: "space-y-4", children: [_jsx(AlertDestructive, { title: "Error", description: "Something went wrong. Please try again." }), _jsx(AlertWarning, { title: "Warning", description: "Please review your input before proceeding." }), _jsx(AlertSuccess, { title: "Success", description: "Your changes have been saved successfully." }), _jsx(AlertInfo, { title: "Information", description: "Here's some helpful information for you." })] })] }), _jsxs(Card, { children: [_jsxs(CardHeader, { children: [_jsx(CardTitle, { children: "Tabs Component" }), _jsx(CardDescription, { children: "Tab navigation with different variants" })] }), _jsx(CardContent, { children: _jsxs(Tabs, { defaultValue: "account", className: "w-full", children: [_jsxs(TabsList, { children: [_jsx(TabsTrigger, { value: "account", children: "Account" }), _jsx(TabsTrigger, { value: "password", children: "Password" }), _jsx(TabsTrigger, { value: "settings", children: "Settings" })] }), _jsxs(TabsContent, { value: "account", className: "space-y-4", children: [_jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "name", children: "Name" }), _jsx(Input, { id: "name", defaultValue: "John Doe" })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "email", children: "Email" }), _jsx(Input, { id: "email", type: "email", defaultValue: "john@example.com" })] })] }), _jsxs(TabsContent, { value: "password", className: "space-y-4", children: [_jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "current", children: "Current Password" }), _jsx(Input, { id: "current", type: "password" })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "new", children: "New Password" }), _jsx(Input, { id: "new", type: "password" })] })] }), _jsxs(TabsContent, { value: "settings", className: "space-y-4", children: [_jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Switch, {}), _jsx(Label, { children: "Enable notifications" })] }), _jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Switch, {}), _jsx(Label, { children: "Enable dark mode" })] })] })] }) })] }), _jsxs(Card, { children: [_jsxs(CardHeader, { children: [_jsx(CardTitle, { children: "Spacing & Layout" }), _jsx(CardDescription, { children: "Demonstrating various spacing utilities and layout patterns" })] }), _jsxs(CardContent, { className: "space-y-4", children: [_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-4", children: [_jsx("div", { className: "p-4 bg-muted rounded-lg", children: _jsx("p", { className: "text-sm", children: "Card 1" }) }), _jsx("div", { className: "p-4 bg-muted rounded-lg", children: _jsx("p", { className: "text-sm", children: "Card 2" }) }), _jsx("div", { className: "p-4 bg-muted rounded-lg", children: _jsx("p", { className: "text-sm", children: "Card 3" }) })] }), _jsxs("div", { className: "flex gap-2", children: [_jsx(Button, { size: "sm", children: "Small Gap" }), _jsx(Button, { children: "Default Gap" }), _jsx(Button, { size: "lg", children: "Large Button" })] })] })] })] }) }));
}
export default FoundationsDemo;
//# sourceMappingURL=foundations-demo.js.map